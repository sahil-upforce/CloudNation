# Generated by Django 4.0.1 on 2024-01-11 17:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalService',
            fields=[
                ('public_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='public id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'External Service',
                'verbose_name_plural': 'External Services',
                'db_table': 'external_services',
            },
        ),
        migrations.CreateModel(
            name='Framework',
            fields=[
                ('public_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='public id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'framework',
                'verbose_name_plural': 'frameworks',
                'db_table': 'frameworks',
            },
        ),
        migrations.CreateModel(
            name='ExternalServicePlanType',
            fields=[
                ('public_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='public id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('storage', models.FloatField(help_text='Storage is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='storage')),
                ('bandwidth', models.FloatField(help_text='Bandwidth is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='bandwidth')),
                ('memory', models.FloatField(help_text='Memory is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='memory')),
                ('cpu', models.FloatField(help_text='CPU is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='cpu')),
                ('monthly_cost', models.FloatField(help_text='Monthly cost is in Dollar', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='monthly cost')),
                ('per_hour_cost', models.FloatField(help_text='Per-Hour cost is in Dollar', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='per hour cost')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('external_service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='external_service_plan_types', to='core.externalservice', verbose_name='external service')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'External Service Plan Type',
                'verbose_name_plural': 'External Service Plan Types',
                'db_table': 'external_service_plan_types',
            },
        ),
        migrations.CreateModel(
            name='DatabaseType',
            fields=[
                ('public_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='public id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Database Type',
                'verbose_name_plural': 'Database Types',
                'db_table': 'database_types',
            },
        ),
        migrations.CreateModel(
            name='DatabasePlanType',
            fields=[
                ('public_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='public id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('storage', models.FloatField(help_text='Storage is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='storage')),
                ('bandwidth', models.FloatField(help_text='Bandwidth is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='bandwidth')),
                ('memory', models.FloatField(help_text='Memory is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='memory')),
                ('cpu', models.FloatField(help_text='CPU is in GB', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='cpu')),
                ('monthly_cost', models.FloatField(help_text='Monthly cost is in Dollar', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='monthly cost')),
                ('per_hour_cost', models.FloatField(help_text='Per-Hour cost is in Dollar', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='per hour cost')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('database_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='database_plan_types', to='core.databasetype', verbose_name='database type')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Database Plan Type',
                'verbose_name_plural': 'Database Plan Types',
                'db_table': 'database_plan_types',
            },
        ),
    ]
